package authviews

import (
	"net/http"

	"github.com/nick-friedrich/beesting/app/example-app/types"
	components "github.com/nick-friedrich/beesting/app/example-app/views/components"
	viewUtils "github.com/nick-friedrich/beesting/app/example-app/views/utils"
)

type LoginProps struct {
	Errors                types.AuthValidationErrors
	Email                 string
	SuccessMessage        string
	ErrorMessage          string
	ShowResendConfirmLink bool
	Request               *http.Request
}

templ Login(props LoginProps) {
	<div class="min-h-[calc(100vh-200px)] flex items-center justify-center bg-base-200 p-4 max-w-xl	 mx-auto">
		@components.Card("Sign in to your account") {
			<p class="text-base-content/70 text-center mb-6">Login to your account to continue.</p>
			if props.Errors.General != "" {
				@components.Alert(components.AlertProps{
					AlertType: components.AlertTypeError,
					Message:   props.Errors.General,
				})
				if props.ShowResendConfirmLink {
					<div class="mt-4 text-center">
						<form method="post" action="/resend-confirmation" class="inline">
							@components.CSRF(props.Request)
							<input type="hidden" name="email" value={ props.Email }/>
							<button type="submit" class="link link-primary text-sm font-medium">
								Resend confirmation email
							</button>
						</form>
					</div>
				}
			}
			if props.SuccessMessage != "" {
				@components.Alert(components.AlertProps{
					AlertType: components.AlertTypeSuccess,
					Message:   props.SuccessMessage,
				})
			}
			if props.ErrorMessage != "" {
				@components.Alert(components.AlertProps{
					AlertType: components.AlertTypeError,
					Message:   props.ErrorMessage,
				})
			}
			<form method="post" class="space-y-4">
				@components.CSRF(props.Request)
				<div class="form-control">
					<label class="label">
						<span class="label-text font-medium">Email</span>
					</label>
					<input
						name="email"
						type="email"
						if props.Errors.Email != "" {
							class="input input-bordered input-error w-full"
						} else {
							class="input input-bordered w-full"
						}
						placeholder="Enter your email"
						value={ props.Email }
						required
					/>
					if props.Errors.Email != "" {
						<label class="label">
							<span class="label-text-alt text-error">{ viewUtils.FirstToUpper(props.Errors.Email) }</span>
						</label>
					}
				</div>
				<div class="form-control">
					<label class="label">
						<span class="label-text font-medium">Password</span>
					</label>
					<input
						name="password"
						type="password"
						if props.Errors.Password != "" {
							class="input input-bordered input-error w-full"
						} else {
							class="input input-bordered w-full"
						}
						placeholder="Enter your password"
						required
					/>
					if props.Errors.Password != "" {
						<label class="label">
							<span class="label-text-alt text-error">{ viewUtils.FirstToUpper(props.Errors.Password) }</span>
						</label>
					}
				</div>
				<div class="form-control mt-6">
					<button class="btn btn-primary w-full">Sign In</button>
				</div>
				<div class="text-center">
					<p class="text-sm text-base-content/70">
						Don't have an account? 
						<a href="/register" class="link link-primary font-medium">Register here</a>
					</p>
				</div>
			</form>
		}
	</div>
}
