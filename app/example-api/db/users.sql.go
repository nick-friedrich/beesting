// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.30.0
// source: users.sql

package db

import (
	"context"
	"database/sql"
)

const createUser = `-- name: CreateUser :one
INSERT INTO users (id, name, email, password_hash, confirmEmailToken, confirmEmailTokenExpiresAt)
VALUES (?, ?, ?, ?, ?, ?)
RETURNING id, name, email, password_hash, role, confirmedat, confirmemailtoken, confirmemailtokenexpiresat, created_at, updated_at
`

type CreateUserParams struct {
	ID                         string         `json:"id"`
	Name                       string         `json:"name"`
	Email                      string         `json:"email"`
	PasswordHash               string         `json:"password_hash"`
	Confirmemailtoken          sql.NullString `json:"confirmemailtoken"`
	Confirmemailtokenexpiresat sql.NullTime   `json:"confirmemailtokenexpiresat"`
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (User, error) {
	row := q.db.QueryRowContext(ctx, createUser,
		arg.ID,
		arg.Name,
		arg.Email,
		arg.PasswordHash,
		arg.Confirmemailtoken,
		arg.Confirmemailtokenexpiresat,
	)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Email,
		&i.PasswordHash,
		&i.Role,
		&i.Confirmedat,
		&i.Confirmemailtoken,
		&i.Confirmemailtokenexpiresat,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getUser = `-- name: GetUser :one
SELECT id, name, email, password_hash, role, confirmedat, confirmemailtoken, confirmemailtokenexpiresat, created_at, updated_at FROM users
WHERE id = ?
LIMIT 1
`

func (q *Queries) GetUser(ctx context.Context, id string) (User, error) {
	row := q.db.QueryRowContext(ctx, getUser, id)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Email,
		&i.PasswordHash,
		&i.Role,
		&i.Confirmedat,
		&i.Confirmemailtoken,
		&i.Confirmemailtokenexpiresat,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getUserByEmail = `-- name: GetUserByEmail :one
SELECT id, name, email, password_hash, role, confirmedat, confirmemailtoken, confirmemailtokenexpiresat, created_at, updated_at FROM users
WHERE email = ?
LIMIT 1
`

func (q *Queries) GetUserByEmail(ctx context.Context, email string) (User, error) {
	row := q.db.QueryRowContext(ctx, getUserByEmail, email)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Email,
		&i.PasswordHash,
		&i.Role,
		&i.Confirmedat,
		&i.Confirmemailtoken,
		&i.Confirmemailtokenexpiresat,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
